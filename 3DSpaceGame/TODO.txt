


What is this Game?
	3D person space ship dog fighting game

features:
	- fly around in space ship
	- destroy atreoids
	- dog fight other ships


TODO and PLANNING:
	<Done> - object hirarchy {
		camera
	
	}

	<Done> - basic object shader

	<Done> - basic player controller of basic mesh

	<Done> - replace basic mesh with model {
		load model data from blender
	} 

	skybox {
		shader? procedural?
		cubeMaps

		random julia set fractals in skybox?
	}


	particles {
		<WIP> - abstract ParticleSystem

		- space dust particles when flying to get a sense of movement
		- rocket engine flames
	}

	<Done> - upgrade camera/ship controller 

	Shaders {
		<Done> - upgrade object shader to use blinn-phong lightning model
		- upgrade object shader to support multiple point lights

		- DebugDrawing shader

		- Shader preProcessor for abstraction and refactoring of glsl code
			<Done> - support for #include directive
			<Done> - deffine shaders in json file

		- system for image effect shaders
		- image effect shaders {
			- bloom
			- gamma correction?
			- shock waves
			- sun rays?
		}

	}

	DebugDrawing {
		lines
	}

	<Done> - refactor transformations in Transform class
	<Done> - Transform.LookAt()

	Assets manager {
		<Done> - auto loading of OBJs
		auto loading shaders
	}



	ships {
		- The Turtle.
		- The other cool one
	}

	ships classes system {
		Tier system {
			low tier ships and high tier ships
		}
		ship class {
			Military, Mining, civilian, research
		}
	}

	World {
		galaxy
		
		solar system {
			contains 'sectors' that are points of intrest that you can travel to
				- space station
					- civilian
					- pirate
					- military 
				- planet orbital station?
				- astreoid belt
					- rich mining areas (may contain mining facilitys)
					- cold areas where there is ice astreoids
				- scrap yard 
		}

		economy {
			have economy based on real world models
				todo: learn how economies work, khanacademy is my best friend 
		}
	}


	User interface system {
	
		canvas class 

		UIElement
			box-model
				width*height
				position/relative position
			OnHover()
			OnClick()

		shader for drawing UIElement

		text rendering
	}

	prefab system {
		a prefab describes a gameObject:
			transform,
			components list
				the type and constructor arguments
			parent object

		class Prefab {
			static FromFile() // load from file formats 
			static FromObj() // create from exsisting object
			GameObject InitializeInstance() // create a new instance of the prefab
		}

		todos:
			<Done> - Init GameObject from Prefab class
			- load Prefab object from file
			- make prefab from GameObject
	}

	

